var searchIndex = {};
searchIndex["musicbrainz"] = {"doc":"","items":[[3,"Uuid","musicbrainz","A Universally Unique Identifier (UUID).",null,null],[3,"MusicBrainz","","",null,null],[0,"artist","","",null,null],[3,"Artist","musicbrainz::artist","",null,null],[12,"id","","",0,null],[12,"name","","",0,null],[12,"gender","","",0,null],[12,"artist_type","","",0,null],[12,"tags","","",0,null],[12,"release_groups","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"uuid"},{"name":"string"},{"name":"string"},{"name":"persontype"},{"name":"vec"},{"name":"vec"}],"output":{"name":"artist"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"artist"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"search","","",0,null],[11,"lookup","","",0,null],[0,"release_group","musicbrainz","",null,null],[3,"ReleaseGroup","musicbrainz::release_group","",null,null],[12,"title","","",1,null],[12,"release_date","","",1,null],[12,"id","","",1,null],[12,"artist","","",1,null],[12,"primary_type","","",1,null],[12,"secondary_types","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","",1,{"inputs":[{"name":"string"},{"name":"string"},{"name":"uuid"},{"name":"uuid"},{"name":"albummaintype"},{"name":"vec"}],"output":{"name":"releasegroup"}}],[11,"eq","","",1,null],[11,"search","","",1,null],[11,"lookup","","",1,null],[0,"enums","musicbrainz","",null,null],[4,"PersonType","musicbrainz::enums","The PersonType enum is used to state whether an artist is a person, a group, or something else.",null,null],[13,"Person","","Indicates an individual person.",2,null],[13,"Group","","Indicates a group of people that may or may not have a distinctive name.",2,null],[13,"Orchestra","","Indicates an orchestra (a large instrumental ensemble).",2,null],[13,"Choir","","Indicates a choir/chorus (a large vocal ensemble).",2,null],[13,"Character","","Indicates an individual fictional character.",2,null],[13,"Other","","Anything which does not fit into the above categories.",2,null],[4,"AlbumMainType","","",null,null],[13,"Album","","",3,null],[13,"Single","","",3,null],[13,"EP","","",3,null],[13,"Broadcast","","",3,null],[13,"Other","","",3,null],[4,"AlbumSecondaryType","","",null,null],[13,"Compilation","","",4,null],[13,"Soundtrack","","",4,null],[13,"Spokenword","","",4,null],[13,"Interview","","",4,null],[13,"Audiobook","","",4,null],[13,"Live","","",4,null],[13,"Remix","","",4,null],[13,"DjMix","","",4,null],[13,"MixtapeStreet","","",4,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"traits","musicbrainz","",null,null],[8,"Entity","musicbrainz::traits","",null,null],[10,"search","","Searches MusicBrainz for entities based on the search query.",5,null],[10,"lookup","","Lookup an entity by using its MusicBrainz Identifier.",5,null],[0,"error","musicbrainz","",null,null],[4,"Error","musicbrainz::error","",null,null],[13,"Http","","",6,null],[13,"ParseJson","","",6,null],[13,"ParseUuid","","",6,null],[13,"AsSlice","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","musicbrainz","",7,null],[11,"new","","Instantiates a new `MusicBrainz` struct.",7,{"inputs":[],"output":{"name":"musicbrainz"}}],[11,"artist","","",7,null],[11,"nil","","The &#39;nil UUID&#39;.",8,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",8,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",8,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",8,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",8,null],[11,"get_version_num","","Returns the version number of the `Uuid`.",8,null],[11,"get_version","","Returns the version of the `Uuid`.",8,null],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",8,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of 32 hexadecimal digits.",8,null],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of hexadecimal digits separated into gropus with a hyphen.",8,null],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a\nstring of the UUID as a full URN string.",8,null],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,null],[11,"default","","Returns the nil UUID, which is all zeroes",8,{"inputs":[],"output":{"name":"uuid"}}],[11,"hash","","",8,null],[11,"cmp","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null]],"paths":[[3,"Artist"],[3,"ReleaseGroup"],[4,"PersonType"],[4,"AlbumMainType"],[4,"AlbumSecondaryType"],[8,"Entity"],[4,"Error"],[3,"MusicBrainz"],[3,"Uuid"]]};
initSearch(searchIndex);
